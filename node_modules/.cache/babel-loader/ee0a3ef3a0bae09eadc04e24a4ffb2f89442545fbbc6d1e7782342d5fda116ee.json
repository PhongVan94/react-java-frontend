{"ast":null,"code":"// import Button from 'react-bootstrap/Button';\n// import Modal from 'react-bootstrap/Modal';\n// import { useEffect, useState } from 'react';\n// import { createNewUser, fetchGroup, updateCurrentUser } from '../../services/userServices';\n// import { toast } from 'react-toastify';\n// import _, { forEach } from 'lodash'\n//\n// const ModalUser = (props) => {\n//     const { action, dataModalUser } = props;\n//\n//     const defaultUserData = {\n//         email: '',\n//         phone: '',\n//         username: '',\n//         password: '',\n//         address: '',\n//         sex: '',\n//         group: ''\n//     }\n//     const validInputsDefault = {\n//         email: true,\n//         phone: true,\n//         username: true,\n//         password: true,\n//         address: true,\n//         sex: true,\n//         group: true\n//     }\n//\n//     const [userData, setUserData] = useState(defaultUserData);\n//     const [validInputs, setValidInputs] = useState(validInputsDefault);\n//\n//     const [userGroups, setUserGroups] = useState([]);\n//\n//     useEffect(() => {\n//         getGroups();\n//\n//     }, [])\n//\n//     useEffect(() => {\n//         if (action === 'UPDATE') {\n//             setUserData({ ...dataModalUser, group: dataModalUser.Group ? dataModalUser.Group.id : '' });\n//         }\n//     }, [dataModalUser])\n//\n//     useEffect(() => {\n//         if (action === 'CREATE') {\n//             if (userGroups && userGroups.length > 0) {\n//                 setUserData({ ...userData, group: userGroups[0].id })\n//             }\n//         }\n//     }, [action])\n//\n//     const getGroups = async () => {\n//         let res = await fetchGroup();\n//         console.log(res)\n//         if (res && res.EC === 0) {\n//             setUserGroups(res.DT);\n//             if (res.DT && res.DT.length > 0) {\n//                 let groups = res.DT;\n//                 setUserData({ ...userData, group: groups[0].id })\n//             }\n//         } else {\n//             toast.error(res.EM)\n//         }\n//     }\n//\n//     const handleOnChangeInput = (value, name) => {\n//         let _userData = _.cloneDeep(userData);\n//         _userData[name] = value;\n//         setUserData(_userData);\n//     }\n//\n//     const CheckValidInputs = () => {\n//\n//         if (action === 'UPDATE') return true;\n//\n//         // create user\n//         setValidInputs(validInputsDefault);\n//         let arr = ['email', 'phone', 'password', 'group'];\n//         let check = true;\n//         for (let i = 0; i < arr.length; i++) {\n//             // check empty input\n//             if (!userData[arr[i]]) {\n//                 let _validInputs = _.cloneDeep(validInputsDefault);\n//                 _validInputs[arr[i]] = false;\n//                 setValidInputs(_validInputs);\n//\n//                 toast.error(`Empty input ${arr[i]}`);\n//\n//                 check = false;\n//                 break;\n//             }\n//         }\n//         return check;\n//     }\n//\n//     const handleConfirmUser = async () => {\n//\n//         //create User\n//         let check = CheckValidInputs();\n//         if (check) {\n//             let res = action === 'CREATE' ?\n//                 await createNewUser({ ...userData, groupId: userData['group'] })\n//                 : await updateCurrentUser({ ...userData, groupId: userData['group'] });\n//\n//             if (res && res.EC === 0) {\n//                 props.onHide();\n//                 setUserData({\n//                     ...defaultUserData, group: userGroups && userGroups.length > 0\n//                         ? userGroups[0].id : ''\n//                 })\n//             }\n//             if (res && res.EC !== 0) {\n//                 toast.error(res.EM);\n//                 let _validInputs = _.cloneDeep(validInputsDefault);\n//                 _validInputs[res.DT] = false;\n//                 setValidInputs(_validInputs);\n//             }\n//         }\n//     }\n//     const handleCloseModalUser = () => {\n//         props.onHide();\n//         setUserData(defaultUserData);\n//         setValidInputs(validInputsDefault);\n//     }\n//\n//     return (\n//         <>\n//             <Modal size=\"lg\" show={props.show} className='modal-user' onHide={() => handleCloseModalUser()} >\n//                 <Modal.Header closeButton >\n//                     <Modal.Title id=\"contained-modal-title-vcenter\">\n//                         <span>{props.action === 'CREATE'\n//                             ? 'Crete new user' : 'Edit a user'}</span>\n//                     </Modal.Title>\n//                 </Modal.Header>\n//                 <Modal.Body>\n//                     <div className='content-body row'>\n//                         <div className='col-12 col-sm-6 form-group'>\n//                             <label>Email Address (<span className='text-danger'>*</span>): </label>\n//                             <input\n//                                 disabled={action === 'CREATE' ? false : true}\n//                                 className={validInputs.email ? 'form-control' : 'form-control is-invalid'}\n//                                 type=\"email\" value={userData.email}\n//                                 onChange={(event) => handleOnChangeInput(event.target.value, \"email\")}\n//\n//                             />\n//                         </div>\n//                         <div className='col-12 col-sm-6 form-group'>\n//                             <label>Phone Number(<span className='text-danger'>*</span>):</label>\n//                             <input\n//                                 disabled={action === 'CREATE' ? false : true}\n//                                 className={validInputs.phone ? 'form-control' : 'form-control is-invalid'}\n//                                 type=\"text\" value={userData.phone}\n//                                 onChange={(event) => handleOnChangeInput(event.target.value, \"phone\")}\n//                             />\n//                         </div>\n//                         <div className='col-12 col-sm-6 form-group'>\n//                             <label>Username:</label>\n//                             <input className='form-control'\n//                                 type=\"text\" value={userData.username}\n//                                 onChange={(event) => handleOnChangeInput(event.target.value, \"username\")} />\n//                         </div>\n//                         <div className='col-12 col-sm-6 form-group'>\n//                             {action === 'CREATE'\n//                                 && <>\n//                                     <label>Password(<span className='text-danger'>*</span>):</label>\n//                                     <input className={validInputs.password ? 'form-control' : 'form-control is-invalid'}\n//                                         type=\"password\" value={userData.password}\n//                                         onChange={(event) => handleOnChangeInput(event.target.value, \"password\")} />\n//                                 </>\n//                             }\n//\n//                         </div>\n//                         <div className='col-12 col-sm-12 form-group'>\n//                             <label>Address:</label>\n//                             <input className='form-control' type=\"text\" value={userData.address}\n//                                 onChange={(event) => handleOnChangeInput(event.target.value, \"address\")} />\n//                         </div>\n//                         <div className='col-12 col-sm-6 form-group'>\n//                             <label>Gender:</label>\n//                             <select className='form-select'\n//                                 onChange={(event) => handleOnChangeInput(event.target.value, \"sex\")}>\n//                                 value={userData.sex}\n//\n//                                 <option defaultValue=\"Male\">Male</option>\n//                                 <option value=\"Female\">Female</option>\n//                                 <option value=\"Other\">Other</option>\n//                             </select>\n//                         </div>\n//                         <div className='col-12 col-sm-6 form-group'>\n//                             <label>Group(<span className='text-danger'>*</span>):</label>\n//                             <select className={validInputs.group ? 'form-select' : 'form-select is-invalid'}\n//                                 onChange={(event) => handleOnChangeInput(event.target.value, \"group\")}\n//                                 value={userData.group}\n//                             >\n//                                 {userGroups.length > 0 &&\n//                                     userGroups.map((item, i) => {\n//                                         return (\n//                                             <option key={`group-${i}`} value={item.id}> {item.name}</option>\n//                                         )\n//                                     })\n//                                 }\n//                             </select>\n//                         </div>\n//                     </div>\n//                 </Modal.Body>\n//                 <Modal.Footer>\n//                     <Button variant=\"secondary\" onHide={() => handleCloseModalUser()} >Close</Button>\n//                     <Button variant=\"primary\" onClick={() => handleConfirmUser()}>\n//                         {action === 'CREATE' ? 'Save' : 'Update'}\n//                     </Button>\n//                 </Modal.Footer>\n//             </Modal >\n//         </>\n//     )\n// }\n// export default ModalUser;","map":{"version":3,"names":[],"sources":["C:/Users/admin/Downloads/Study/JavaWeb2024/react-frontend-java/src/components/ManageUsers/ModalUser.js"],"sourcesContent":["// import Button from 'react-bootstrap/Button';\r\n// import Modal from 'react-bootstrap/Modal';\r\n// import { useEffect, useState } from 'react';\r\n// import { createNewUser, fetchGroup, updateCurrentUser } from '../../services/userServices';\r\n// import { toast } from 'react-toastify';\r\n// import _, { forEach } from 'lodash'\r\n//\r\n// const ModalUser = (props) => {\r\n//     const { action, dataModalUser } = props;\r\n//\r\n//     const defaultUserData = {\r\n//         email: '',\r\n//         phone: '',\r\n//         username: '',\r\n//         password: '',\r\n//         address: '',\r\n//         sex: '',\r\n//         group: ''\r\n//     }\r\n//     const validInputsDefault = {\r\n//         email: true,\r\n//         phone: true,\r\n//         username: true,\r\n//         password: true,\r\n//         address: true,\r\n//         sex: true,\r\n//         group: true\r\n//     }\r\n//\r\n//     const [userData, setUserData] = useState(defaultUserData);\r\n//     const [validInputs, setValidInputs] = useState(validInputsDefault);\r\n//\r\n//     const [userGroups, setUserGroups] = useState([]);\r\n//\r\n//     useEffect(() => {\r\n//         getGroups();\r\n//\r\n//     }, [])\r\n//\r\n//     useEffect(() => {\r\n//         if (action === 'UPDATE') {\r\n//             setUserData({ ...dataModalUser, group: dataModalUser.Group ? dataModalUser.Group.id : '' });\r\n//         }\r\n//     }, [dataModalUser])\r\n//\r\n//     useEffect(() => {\r\n//         if (action === 'CREATE') {\r\n//             if (userGroups && userGroups.length > 0) {\r\n//                 setUserData({ ...userData, group: userGroups[0].id })\r\n//             }\r\n//         }\r\n//     }, [action])\r\n//\r\n//     const getGroups = async () => {\r\n//         let res = await fetchGroup();\r\n//         console.log(res)\r\n//         if (res && res.EC === 0) {\r\n//             setUserGroups(res.DT);\r\n//             if (res.DT && res.DT.length > 0) {\r\n//                 let groups = res.DT;\r\n//                 setUserData({ ...userData, group: groups[0].id })\r\n//             }\r\n//         } else {\r\n//             toast.error(res.EM)\r\n//         }\r\n//     }\r\n//\r\n//     const handleOnChangeInput = (value, name) => {\r\n//         let _userData = _.cloneDeep(userData);\r\n//         _userData[name] = value;\r\n//         setUserData(_userData);\r\n//     }\r\n//\r\n//     const CheckValidInputs = () => {\r\n//\r\n//         if (action === 'UPDATE') return true;\r\n//\r\n//         // create user\r\n//         setValidInputs(validInputsDefault);\r\n//         let arr = ['email', 'phone', 'password', 'group'];\r\n//         let check = true;\r\n//         for (let i = 0; i < arr.length; i++) {\r\n//             // check empty input\r\n//             if (!userData[arr[i]]) {\r\n//                 let _validInputs = _.cloneDeep(validInputsDefault);\r\n//                 _validInputs[arr[i]] = false;\r\n//                 setValidInputs(_validInputs);\r\n//\r\n//                 toast.error(`Empty input ${arr[i]}`);\r\n//\r\n//                 check = false;\r\n//                 break;\r\n//             }\r\n//         }\r\n//         return check;\r\n//     }\r\n//\r\n//     const handleConfirmUser = async () => {\r\n//\r\n//         //create User\r\n//         let check = CheckValidInputs();\r\n//         if (check) {\r\n//             let res = action === 'CREATE' ?\r\n//                 await createNewUser({ ...userData, groupId: userData['group'] })\r\n//                 : await updateCurrentUser({ ...userData, groupId: userData['group'] });\r\n//\r\n//             if (res && res.EC === 0) {\r\n//                 props.onHide();\r\n//                 setUserData({\r\n//                     ...defaultUserData, group: userGroups && userGroups.length > 0\r\n//                         ? userGroups[0].id : ''\r\n//                 })\r\n//             }\r\n//             if (res && res.EC !== 0) {\r\n//                 toast.error(res.EM);\r\n//                 let _validInputs = _.cloneDeep(validInputsDefault);\r\n//                 _validInputs[res.DT] = false;\r\n//                 setValidInputs(_validInputs);\r\n//             }\r\n//         }\r\n//     }\r\n//     const handleCloseModalUser = () => {\r\n//         props.onHide();\r\n//         setUserData(defaultUserData);\r\n//         setValidInputs(validInputsDefault);\r\n//     }\r\n//\r\n//     return (\r\n//         <>\r\n//             <Modal size=\"lg\" show={props.show} className='modal-user' onHide={() => handleCloseModalUser()} >\r\n//                 <Modal.Header closeButton >\r\n//                     <Modal.Title id=\"contained-modal-title-vcenter\">\r\n//                         <span>{props.action === 'CREATE'\r\n//                             ? 'Crete new user' : 'Edit a user'}</span>\r\n//                     </Modal.Title>\r\n//                 </Modal.Header>\r\n//                 <Modal.Body>\r\n//                     <div className='content-body row'>\r\n//                         <div className='col-12 col-sm-6 form-group'>\r\n//                             <label>Email Address (<span className='text-danger'>*</span>): </label>\r\n//                             <input\r\n//                                 disabled={action === 'CREATE' ? false : true}\r\n//                                 className={validInputs.email ? 'form-control' : 'form-control is-invalid'}\r\n//                                 type=\"email\" value={userData.email}\r\n//                                 onChange={(event) => handleOnChangeInput(event.target.value, \"email\")}\r\n//\r\n//                             />\r\n//                         </div>\r\n//                         <div className='col-12 col-sm-6 form-group'>\r\n//                             <label>Phone Number(<span className='text-danger'>*</span>):</label>\r\n//                             <input\r\n//                                 disabled={action === 'CREATE' ? false : true}\r\n//                                 className={validInputs.phone ? 'form-control' : 'form-control is-invalid'}\r\n//                                 type=\"text\" value={userData.phone}\r\n//                                 onChange={(event) => handleOnChangeInput(event.target.value, \"phone\")}\r\n//                             />\r\n//                         </div>\r\n//                         <div className='col-12 col-sm-6 form-group'>\r\n//                             <label>Username:</label>\r\n//                             <input className='form-control'\r\n//                                 type=\"text\" value={userData.username}\r\n//                                 onChange={(event) => handleOnChangeInput(event.target.value, \"username\")} />\r\n//                         </div>\r\n//                         <div className='col-12 col-sm-6 form-group'>\r\n//                             {action === 'CREATE'\r\n//                                 && <>\r\n//                                     <label>Password(<span className='text-danger'>*</span>):</label>\r\n//                                     <input className={validInputs.password ? 'form-control' : 'form-control is-invalid'}\r\n//                                         type=\"password\" value={userData.password}\r\n//                                         onChange={(event) => handleOnChangeInput(event.target.value, \"password\")} />\r\n//                                 </>\r\n//                             }\r\n//\r\n//                         </div>\r\n//                         <div className='col-12 col-sm-12 form-group'>\r\n//                             <label>Address:</label>\r\n//                             <input className='form-control' type=\"text\" value={userData.address}\r\n//                                 onChange={(event) => handleOnChangeInput(event.target.value, \"address\")} />\r\n//                         </div>\r\n//                         <div className='col-12 col-sm-6 form-group'>\r\n//                             <label>Gender:</label>\r\n//                             <select className='form-select'\r\n//                                 onChange={(event) => handleOnChangeInput(event.target.value, \"sex\")}>\r\n//                                 value={userData.sex}\r\n//\r\n//                                 <option defaultValue=\"Male\">Male</option>\r\n//                                 <option value=\"Female\">Female</option>\r\n//                                 <option value=\"Other\">Other</option>\r\n//                             </select>\r\n//                         </div>\r\n//                         <div className='col-12 col-sm-6 form-group'>\r\n//                             <label>Group(<span className='text-danger'>*</span>):</label>\r\n//                             <select className={validInputs.group ? 'form-select' : 'form-select is-invalid'}\r\n//                                 onChange={(event) => handleOnChangeInput(event.target.value, \"group\")}\r\n//                                 value={userData.group}\r\n//                             >\r\n//                                 {userGroups.length > 0 &&\r\n//                                     userGroups.map((item, i) => {\r\n//                                         return (\r\n//                                             <option key={`group-${i}`} value={item.id}> {item.name}</option>\r\n//                                         )\r\n//                                     })\r\n//                                 }\r\n//                             </select>\r\n//                         </div>\r\n//                     </div>\r\n//                 </Modal.Body>\r\n//                 <Modal.Footer>\r\n//                     <Button variant=\"secondary\" onHide={() => handleCloseModalUser()} >Close</Button>\r\n//                     <Button variant=\"primary\" onClick={() => handleConfirmUser()}>\r\n//                         {action === 'CREATE' ? 'Save' : 'Update'}\r\n//                     </Button>\r\n//                 </Modal.Footer>\r\n//             </Modal >\r\n//         </>\r\n//     )\r\n// }\r\n// export default ModalUser;"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}