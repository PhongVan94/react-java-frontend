{"ast":null,"code":"// import { loginApi } from \"../../services/UserService\";\nimport { toast } from \"react-toastify\";\nexport const FETCH_USER_LOGIN = 'FETCH_USER_LOGIN';\nexport const FETCH_USER_ERROR = 'FETCH_USER_ERROR';\nexport const FETCH_USER_SUCCESS = 'FETCH_USER_SUCCESS';\nexport const USER_LOGOUT = 'USER_LOGOUT';\nexport const USER_REFRESH = 'USER_REFRESH';\nexport const handleLoginRedux = (email, password) => {\n  // return async (dispatch, getState) => {\n  //     dispatch({ type: FETCH_USER_LOGIN });\n  //\n  //     let res = await loginApi(email.trim(), password);\n  //     if (res && res.token) {\n  //\n  //         localStorage.setItem('token', res.token);\n  //         localStorage.setItem('email', email.trim());\n  //         dispatch({\n  //             type: FETCH_USER_SUCCESS,\n  //             data: { email: email.trim(), token: res.token }\n  //         });\n  //     } else {\n  //         //error\n  //         if (res && res.status === 400) {\n  //             toast.error(res.data.error)\n  //         }\n  //         dispatch({\n  //             type: FETCH_USER_ERROR\n  //         });\n  //\n  //     }\n  //\n  // }\n};\nexport const handleLogoutRedux = () => {\n  return (dispatch, getState) => {\n    dispatch({\n      type: USER_LOGOUT\n    });\n  };\n};\nexport const handleRefresh = () => {\n  return (dispatch, getState) => {\n    dispatch({\n      type: USER_REFRESH\n    });\n  };\n};","map":{"version":3,"names":["toast","FETCH_USER_LOGIN","FETCH_USER_ERROR","FETCH_USER_SUCCESS","USER_LOGOUT","USER_REFRESH","handleLoginRedux","email","password","handleLogoutRedux","dispatch","getState","type","handleRefresh"],"sources":["C:/Users/admin/Downloads/Study/JavaWeb2024/react-frontend-java/src/components/redux/actions/userAction.js"],"sourcesContent":["// import { loginApi } from \"../../services/UserService\";\r\nimport { toast } from \"react-toastify\";\r\n\r\n\r\nexport const FETCH_USER_LOGIN = 'FETCH_USER_LOGIN';\r\nexport const FETCH_USER_ERROR = 'FETCH_USER_ERROR';\r\nexport const FETCH_USER_SUCCESS = 'FETCH_USER_SUCCESS';\r\n\r\nexport const USER_LOGOUT = 'USER_LOGOUT';\r\nexport const USER_REFRESH = 'USER_REFRESH';\r\n\r\nexport const handleLoginRedux = (email, password) => {\r\n    // return async (dispatch, getState) => {\r\n    //     dispatch({ type: FETCH_USER_LOGIN });\r\n    //\r\n    //     let res = await loginApi(email.trim(), password);\r\n    //     if (res && res.token) {\r\n    //\r\n    //         localStorage.setItem('token', res.token);\r\n    //         localStorage.setItem('email', email.trim());\r\n    //         dispatch({\r\n    //             type: FETCH_USER_SUCCESS,\r\n    //             data: { email: email.trim(), token: res.token }\r\n    //         });\r\n    //     } else {\r\n    //         //error\r\n    //         if (res && res.status === 400) {\r\n    //             toast.error(res.data.error)\r\n    //         }\r\n    //         dispatch({\r\n    //             type: FETCH_USER_ERROR\r\n    //         });\r\n    //\r\n    //     }\r\n    //\r\n    // }\r\n}\r\nexport const handleLogoutRedux = () => {\r\n    return (dispatch, getState) => {\r\n        dispatch({\r\n            type: USER_LOGOUT\r\n        })\r\n    }\r\n}\r\n\r\nexport const handleRefresh = () => {\r\n    return (dispatch, getState) => {\r\n        dispatch({\r\n            type: USER_REFRESH\r\n        })\r\n    }\r\n}\r\n"],"mappings":"AAAA;AACA,SAASA,KAAK,QAAQ,gBAAgB;AAGtC,OAAO,MAAMC,gBAAgB,GAAG,kBAAkB;AAClD,OAAO,MAAMC,gBAAgB,GAAG,kBAAkB;AAClD,OAAO,MAAMC,kBAAkB,GAAG,oBAAoB;AAEtD,OAAO,MAAMC,WAAW,GAAG,aAAa;AACxC,OAAO,MAAMC,YAAY,GAAG,cAAc;AAE1C,OAAO,MAAMC,gBAAgB,GAAGA,CAACC,KAAK,EAAEC,QAAQ,KAAK;EACjD;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AAAA,CACH;AACD,OAAO,MAAMC,iBAAiB,GAAGA,CAAA,KAAM;EACnC,OAAO,CAACC,QAAQ,EAAEC,QAAQ,KAAK;IAC3BD,QAAQ,CAAC;MACLE,IAAI,EAAER;IACV,CAAC,CAAC;EACN,CAAC;AACL,CAAC;AAED,OAAO,MAAMS,aAAa,GAAGA,CAAA,KAAM;EAC/B,OAAO,CAACH,QAAQ,EAAEC,QAAQ,KAAK;IAC3BD,QAAQ,CAAC;MACLE,IAAI,EAAEP;IACV,CAAC,CAAC;EACN,CAAC;AACL,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}